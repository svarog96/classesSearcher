Программа поиска файлов

Для запуска программы необходимо иметь Javac 1.8. Это связано с тем что в проекте используются лямбда-выражения.
Если есть необходимость, то можно адаптировать программу к более ранним версиям компиляторов.

Пакет с файлами программы необходимо положить в папку src которая находится в корне проекта.

1. Класс Utils(абстрактный) содержит данные для индексации и проиндексированные данные. Все поля имеют модификатор private.
Доступ к полям класса осуществляется через get/set методы.
    - поле FILE_EXTENSION - расширение искомых файлов
    - поле ROOT_PROJECT_DIRECTORY - корневая директория с которой начинается поиск(установлена родительская директория папки src)
    - поле FILES_STORAGE - коллекция HashMap в которой хранятся все найденные при индексации файлы

2. Класс Searcher имплементирует интерфейс ISearcher и реализует методы
    - метод refresh(String[] fileNames, long[] modificationDate) - обновляет проиндексированные данные.
    - метод guess(String start) - выполняет поиск всех данных имена которых начинаются со start. Возвращает массив от 0 до 12 элементов
в static блоке происходит индексация данных путём вызова DataIndexing.doDataIndexing();.

3. Класс DataIndexin(абстрактный) производит индексацию данных. Содержит внутренний класс ProjectDirectoryVisitor и метод doDataIndexin()
    - метод doDataIndexin() - очищает коллекцию HashMap из Utils перед добавлением в неё данных, затем вызывает метод walkFileTree библиотеки java.nio
    в который передаёт корневую директорию с которой начнётся поиск и экземпляр класса ProjectDirectoryVisitor

4. Класс ProjectDirectoryVisitor(внутренний) наследует класс SimpleFileVisitor пакета java.nio и переопределяет 2 метода этого класса:
    - метод preVisitDirectory() - действия выполняемые перед посещением директории. Если директория имеет название classesSearcher, то она игнорируется и обход продолжается
    - метод visitFile() - действия выполняемые при посещении директории. Если есть файлы с расширением ".java" добавляет их в коллекцию, если нет продолжает обход "в глубь" дерева каталогов до конца

5. Класс SearchQuery имплементирует интерфейс Runnable. Выполняет поисковый запрос по коллекции проиндексированных файлов.
При создании экземпляра класса SearchQuery в конструктор передаётся строка (имя искомого класса или первые буквы).
Создаётся отдельный поток, выполняется поиск. Результат поиска сохраняется в массив.
    - поле searchParam - первые буквы имени искомого класса
    - поле result - массив, результат поиска
    - конструктор SearchQuery(String searchParam)
    - метод getResult() - возвращает результат поиска
Для каждого найденного результата создаёт объект класса ClassComparator и добавляет его в коллекцию TreeSet
Из TreeSet берёт первые 12(либо меньше) объектов, получает их имена, с помощью ArrayList переводим их в массив String[]
Возвращает полученный результат.

6. Класс ClassComparator имплементирует интерфейс Comparable и реализует его метод compareTo.
    - поле className - имя класса
    - поле modificationDate - дата последнего изменения класса в мс
    - конструктор ClassComparator(className, modificationDate)
    - метод compareTo() - сравнивает текущий объект с полученным сначала по полю modificationDate, если они совпадают сравнение происходит по полю className
    - метод getClassName() - гет-метод возвращающий значение поля className текущего объекта
    - метод getModificationDate() - гет-метод возвращающий значение поля modificationDate текущего объекта
