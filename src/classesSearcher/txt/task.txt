Поиск класса для IDE
Описание проблемы
Представьте, что вы - разработчик из древних времен, когда IDE только появились. У
Вас большой проект на Java с сотней тысяч файлов.
Для облегчения себе жизни Вы задумали реализовать функцию поиска класса по его
имени. Для удобства Вы вводите лишь первые буквы имени класса, IDE вам предлагает
список из 12 классов, которые начинаются с введенных символов. В списке классы
упорядочены по дате последнего изменения (недавно сохраненные в начале), если
изменены в одно время (кнопка Save all в IDE есть), то упорядочены лексикографически.
Ваша задача - реализовать подбор имен классов на языке Java.
Предполагается, что при открытии проекта 1 раз происходит индексация данных,
затем поиски выполняются быстро.
API решения
В решении должен быть класс с конструктором по умолчанию, реализующий интерфейс
public interface ISearcher
{ /**
* Обновляет внутренние структуры данных для последующего быстрого поиска
* @param classNames названия классов в проекте
* @param modificationDates дата модификации класса в формате
мс, прошедших с 1 января 1970 года
*/
public void refresh(String[] classNames, long[] modificationDates);
/**
* Ищет подходящие имена классов
* Название должно начинаться с start
* @param start начало имени класса
* @return массив длины от 0 до 12, имена классов, упорядоченный по
дате модификации и лексиграфически.
*/
public String[] guess(String start);
Как будет проверяться
Долгожданная функция подбора названия класса будет использоваться не только Вами :).
Во-первых, ее будут использовать другие люди. Человек готов подождать несколько секунд
при открытии проекта. Для него поиск будет быстрым, если каждый раз он
будет укладываться в 300 мс.
Во-вторых, за нашей цивилизацией наблюдают марсиане. Марсиане пользуются
ментальный интерфейсом, но все еще не додумались до этой функции IDE. Марсиане
открывают по 100 000 классов в секунду.
Для проверки созданы тестовые наборы входных и ожидаемых данных.
• Количество классов во входных данных от 0 до 100000.
• Имена классов не более 32 символов, содержать лишь латинские буквы и цифры.
Используем лишь короткие имена классов, все уникальны, повторений нет.
• Приложение будет запускаться с ограничениями -Xmx64m -Xms64m -Xss64m.
• Для каждого тестового набора.
• Запускается новый экземпляр решения.
• Выполняется 1 раз метод refresh, измеряется его время работы.
• Выполняется несколько раз (1..100000) метод guess (с различными
параметрами), проверяется, что возвращает то, что нужно, измеряется
среднее время работы.
• За каждый корректный ответ начисляются баллы.
• Если метод refresh или guess (в среднем) отрабатывают достаточно быстро,
то начисляются дополнительные баллы.
• Итоговая оценка является суммой баллов за каждый тестовый набор данных.
• Не бойтесь мелких ошибок. Мы внимательно изучаем исходные тексты. Если видим
простые ошибки (неправильный порядок сортировки, неверный формат возвращаемых
значений), то мы их поправим. Мы понимаем, что задание выполняют люди без опыта.
• В итоге получаем 2 оценки - оригинальную и после исправлений. Для отбора мы
ориентируемся в основном на вторую оценку, так как мы верим, что люди обучаемы :).